#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    0.5360,  0.2783,  0.2960,  0.3489,  -0.2345, -0.0431, -0.6416, -0.0125, -0.0315, -1.2363, -1.1436, 0.0627,  0.2914,
    -0.0304, -0.0517, 0.4330,  -0.3815, 0.0033,  -0.9435, 0.2347,  -0.2191, -0.8300, 0.4155,  0.1009,  0.0602,  -0.1973,
    -0.9639, -0.0691, -0.0301, 0.2242,  0.1095,  0.0279,  0.0644,  -0.1101, -0.1661, 0.0153,  -0.1509, -0.8048, 0.0238,
    -0.0536, -0.0321, -0.8756, 0.2379,  -0.7815, -0.8806, 0.0630,  0.1221,  -0.1327, 0.1437,  0.2378,  -0.0257, 0.1276,
    -0.7401, 0.0429,  -0.0107, -1.2980, -1.2209, 0.2065,  -0.1750, 0.1426,  -1.0959, 0.4311,  0.0693,  0.1325,  -0.8169,
    -0.7368, -0.3593, -0.9972, 0.1135,  0.0835,  0.0616,  -0.2679, 0.3867,  0.0314,  -0.0888, -0.1029, 0.1139,  -0.0709,
    0.0570,  0.1065,  0.2073,  -0.0565, 0.1703,  0.2897,  0.1311,  -0.1139, 0.0819,  0.0238,  0.1940,  0.2323,  0.3240,
    0.3322,  -0.1471, -0.8872, -0.1704, -0.3615, -0.1051, 0.0383,  -0.0836, -0.0545, -0.0021, 0.1216,  -0.0217, -0.1858,
    0.0298,  -0.0850, 0.0780,  0.1037,  0.0266,  -0.0263, 0.0394,  0.0133,  -0.1188, 0.0702,  -0.0189, -0.6375, 0.1927,
    0.1424,  -0.0885, -0.1909, -0.0091, 0.0855,  0.0784,  -0.1418, -0.1746, 0.1102,  0.0567,  0.1739,  0.0067,  0.0773,
    -0.6677, -0.6810, 0.0181,  0.0365,  0.0053,  -0.1389, -0.0414, 0.4547,  0.2641,  -0.1785, -0.1456, 0.1155,  0.3600,
    0.0131,  0.0235,  0.0663,  0.0833,  0.0656,  0.0015,  0.1767,  -0.1693, -0.0079, 0.0304,  0.4651,  0.5662,  -0.0016,
    -0.3691, 0.1282,  0.0671,  -0.2415, -0.4015, 0.0787,  0.1851,  0.2017,  -0.1944, -0.3296, -0.0260, -0.1213, -0.0161,
    -0.1971, 0.1155,  0.1373,  -0.0695, 0.2669,  -0.0426, 0.3000,  0.0724,  -0.8712, 0.0184,  -0.2722, -0.3792, -0.4066,
    -0.9146, 0.3322};

constexpr std::array<float, L2_SIZE> input_biases = {0.6428, 0.5819, 0.8303, 0.0618, -0.2799, -0.5334, 0.4798, 1.1644};

constexpr std::array<float, L2_SIZE> l2_weights = {0.4241, 0.6009, 0.4595, 0.4149, -0.7463, -1.1446, -0.8146, 0.7778};

constexpr float l2_bias = 1.1633;

constexpr std::array<float, INPUT_SIZE> means = {
    5.05588, 6.41532,   0.91594,   0.20918, 0.39816,    0.3921,   0.0117, 0.88112, 8.28416, 336.50386, 336.24534, 60.0,
    0.11244, -23.72334, 633.64106, 5.05588, -967.14224, -3.40596, 62.076, 0.02534, 0.13694, 0.00746,   0.3034};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    2.6188236721092926,  5.27385905173811,    0.2774777764074089,  0.40672315842597406,
    0.5751074807372967,  0.4882187931655233,  0.10753190224300878, 0.32364725489334834,
    10.818604951397385,  3446.1928632253153,  3446.1774626777833,  1.0,
    0.31590702176431595, 45.893494084068166,  4503.078493526632,   2.6188236721092926,
    10400.04664386116,   33.94593578734279,   1415.7006193062145,  0.15715560569066572,
    0.34378399671886994, 0.08604852352016275, 0.4597264839010256};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return result;
    }

    std::array<float, L2_SIZE> output;
};