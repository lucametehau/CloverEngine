#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    0.0440,  -0.0534, -0.1664, 0.0781,  0.2406,  0.0312,  -0.6930, -0.0233, -0.0322, 2.3738,  -1.7410, -0.4283, 0.3378,
    -0.0069, -0.3687, -0.2319, 0.5662,  0.0383,  -0.1138, 0.0547,  0.1644,  -1.8681, -0.3921, 0.1560,  -0.1730, -0.1898,
    0.2031,  0.3841,  0.0496,  -0.0886, -0.0948, -0.2573, 0.7048,  0.6225,  0.6544,  0.2889,  0.0216,  -3.9930, -0.2993,
    0.6069,  0.0861,  -0.2283, 0.0796,  0.0999,  0.3358,  -0.4977, 0.5146,  -0.0489, -0.0547, 0.0395,  0.1202,  0.0030,
    -0.2303, -0.0164, -6.8926, -1.5593, 1.9995,  0.0209,  0.1716,  0.0062,  -0.7167, -0.4376, 0.2245,  0.0038,  -0.0053,
    0.0287,  0.0196,  -0.0031, -0.1881, 1.2515,  -0.0243, 0.0030,  0.0604,  0.0491,  0.0018,  0.0426,  -0.0035, -1.6505,
    5.0115,  -6.3560, -0.1298, 0.0801,  0.0154,  -0.0061, -0.6228, 0.0614,  -0.0029, 0.0624,  0.0266,  -0.0266, -0.0022,
    -0.0397, 0.0320,  0.0215,  0.3772,  0.0122,  -0.0219, -0.0032, 0.2068,  -0.0040, -0.6360, 4.5228,  -4.9930, -0.2056,
    -0.1815, 0.0014,  -0.0112, -0.0221, -0.0208, 0.4310,  -1.3709, -0.0183, -0.0201, 0.0090,  0.0072,  0.3253,  0.0670,
    0.1922,  -0.0695, -0.2873, -0.0399, -0.2888, 0.0271,  0.0420,  1.5651,  -2.7507, 0.0887,  0.2175,  -0.0129, -0.3897,
    0.0394,  -0.6604, 0.0379,  0.0194,  -0.0688, -0.1767, 0.0539,  0.5099,  0.0268,  0.0633,  -0.5755, -0.6378, -0.0102,
    -0.0035, -0.0691, 0.0271,  -0.8583, 3.2113,  -3.1985, -0.0100, -0.1563, -0.0033, -0.0104, -0.0598, -0.1099, 0.0040,
    -0.0121, 0.0054,  0.0869,  0.0158,  -0.0042, 0.2124,  0.0763,  0.1924,  -0.8346, 0.0775,  0.0191,  -0.7027, 0.0184,
    -0.0423, 2.8914,  -2.2623, -0.0353, 0.5759,  0.0079,  0.8065,  -0.3645, -0.0062, 0.0218,  -0.2242, -0.0002, 0.0396,
    -0.2882, -0.1205};

constexpr std::array<float, L2_SIZE> input_biases = {1.7372,  -1.6129, -2.1338, 0.3285,
                                                     -0.4103, 1.0058,  -1.7739, 0.3190};

constexpr std::array<float, L2_SIZE> l2_weights = {1.1933, 0.9680, -5.7956, 2.0447, 7.5446, 0.9772, 5.7709, 0.5968};

constexpr float l2_bias = -2.3315;

constexpr std::array<float, INPUT_SIZE> means = {
    5.3897262980548,     6.283449086538792,    0.8503439266906317, 0.16171397372862945, 0.32162046016455903,
    0.35808620904068605, 0.05581650743961103,  0.806388677051369,  9.530289941625888,   865.775121250797,
    879.9650403169446,   990.7143903443475,    881.9560343349677,  662.3135681115664,   639.7501130590905,
    1.5028460061238345,  -700.6528841160466,   7.2202216103988945, 53.803967306498144,  0.07525829653748593,
    0.09033082829245674, 0.009257409562622238, 0.4154321127812078};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.079945004417443,   5.958497886805035,   0.35673398076296187, 0.36818821875438335, 0.6653416681947776,
    0.47943766637129825, 0.2295670380016584,  0.39512780030606776, 30.113432134708418,  5114.3561310097875,
    5113.90735413281,    5799.314670168664,   5442.181650216963,   6096.507943341796,   4555.490615742364,
    2.0474194736701055,  10254.872548598589,  356.79865481074995,  1231.09126093491,    0.26380766732557603,
    0.2866551408093974,  0.09576904474208793, 0.49279638031478024};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return round(result);
    }

    std::array<float, L2_SIZE> output;
};