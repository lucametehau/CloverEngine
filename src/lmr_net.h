#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    -0.0358, -0.0235, 0.0408,  0.4251,  -0.0396, -0.0088, 0.7499,  0.0905,  0.0336,  -0.0356, -0.0044, -2.1935, -0.4730,
    0.0059,  0.0017,  0.6225,  -0.1111, 0.1979,  -0.1480, 0.0016,  -0.0056, 0.0233,  0.1589,  0.1075,  -0.5788, -0.2289,
    -0.8081, -0.0292, 0.0138,  0.3850,  -0.0432, 0.0106,  0.3242,  -0.1334, -0.0936, -0.6687, 0.0125,  -0.0239, -0.0043,
    -0.0149, 0.0075,  0.1041,  -0.0452, -0.0259, -0.0729, 0.1245,  -1.2448, 0.2340,  0.0908,  -0.0602, -0.3136, -0.0106,
    0.5520,  0.0420,  0.1675,  0.0688,  -0.3167, -0.3006, -0.3348, 0.0019,  -0.0075, 0.0265,  -0.5489, 0.0675,  -0.0032,
    -0.0429, -0.0950, 0.0229,  0.3902,  0.1041,  0.2662,  1.5924,  -0.1552, -0.2258, 0.0110,  0.2462,  -0.0192, 0.0681,
    0.5435,  -0.2932, -2.1939, -0.8747, 0.0211,  -0.1151, 0.1159,  -0.1011, 0.1510,  -0.0113, -0.1402, -0.0487, 0.0396,
    0.2521,  -0.0264, 0.0515,  0.2412,  -1.2556, -0.1236, 0.0036,  -0.2217, 0.4832,  0.1091,  0.2599,  -0.3336, -2.0538,
    -1.0296, -0.0111, -0.0020, -0.0552, -0.7684, 0.2963,  -0.1525, 0.0375,  -0.1750, -0.4389, 0.2724,  -0.0345, -0.0379,
    0.8078,  -1.5234, -0.0934, -0.0011, -1.0878, 0.2548,  0.0913,  0.0583,  -0.4463, -0.2674, -0.8299, 0.0086,  -0.0973,
    0.1180,  -1.0575, 0.0407,  0.0390,  0.0231,  -0.8506, -0.4341, 0.3783,  0.2729,  0.1548,  0.4475,  -0.3069, -0.5214,
    -0.0284, 0.1737,  0.0318,  0.3666,  0.1324,  -0.6123, -0.1180, 0.0658,  -0.0157, -0.1056, 0.1805,  -1.2441, 0.0438,
    0.0306,  -0.1039, -0.2175, 0.0354,  0.7847,  0.0275,  -0.1553, -0.2528, -1.4843, -0.1106, 0.0032,  -0.1264, -0.0231,
    0.0389,  0.3158,  -0.3536, -0.9722, -0.5231, 0.0411,  0.0400,  -0.1034, -0.7581, -0.0427, 0.1767,  -0.0328, -0.3932,
    -0.1081, 0.2736};

constexpr std::array<float, L2_SIZE> input_biases = {-0.7197, -0.2584, -0.7943, -0.1698,
                                                     0.1012,  0.0400,  2.0719,  0.0832};

constexpr std::array<float, L2_SIZE> l2_weights = {0.5363, -1.0055, -2.3352, 0.8657, 0.7021, -1.1582, 1.0089, 0.8465};

constexpr float l2_bias = 0.9093;

constexpr std::array<float, INPUT_SIZE> means = {
    6.027160581624969,  7.056136874145829,     0.8678997620778944,  0.15935916614772533, 0.24624019227289173,
    0.3227743364545601, 0.043345471119212074,  0.8254706063292647,  0.15276941515893883, 5.933370971176647,
    33.64744647149185,  1268.0877115525927,    1268.027981326307,   1083.3541520573276,  -20.87851432126107,
    0.5309353594495552, -1978.157223035682,    -33.397043865095426, -2.723040506770516,  0.04660544943272914,
    0.083368043250297,  0.0066943103451238654, 0.2978627723880286};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.439608005721274,   6.386254429650978,   0.3385997121425661,  0.3660106860631626,  0.6983716889781799,
    0.46753723293538707, 0.203633595589396,   0.37956407155533145, 0.35976509134563706, 0.9385652321883257,
    45.27771792679855,   6551.724233178019,   6553.746367480393,   7084.333508689471,   45.35110313552379,
    0.49904208593637356, 10307.642222733297,  319.2284577721373,   994.4975574355446,   0.21079227100608428,
    0.2764377192333087,  0.08154444526837532, 0.4573188616417934};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return round(result);
    }

    std::array<float, L2_SIZE> output;
};