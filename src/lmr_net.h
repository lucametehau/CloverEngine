#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    0.0478,  0.1808,  0.1111,  0.0160,  -0.1745, 0.0699,  0.1516,  0.0205,  -0.0358, 0.0883,  0.0420,  0.0969,  0.0713,
    -0.0777, -0.9073, 0.3263,  -0.5152, 0.0163,  -0.3690, -0.7915, -0.1431, -0.0634, -0.0027, 0.1629,  0.3316,  0.1784,
    -0.0195, -0.1996, -0.0203, -0.6959, 0.0373,  -0.0635, -0.7819, -1.1024, 0.1841,  0.0280,  -0.0340, 0.0313,  0.1382,
    -0.5050, -0.0020, -0.0165, -0.7345, -0.1430, 0.1165,  0.4153,  0.2886,  0.3326,  0.0237,  0.0482,  -0.0728, -0.0761,
    -0.5780, 0.0311,  -0.0560, -0.8896, -0.7011, 0.0034,  0.1027,  -0.0628, -0.8001, 0.1007,  -0.4639, 0.0722,  -0.1932,
    0.0058,  -0.1550, 0.0258,  0.5334,  0.1190,  0.0135,  0.0681,  0.0556,  -0.2518, -0.0096, -0.0566, -0.0170, -0.0916,
    0.3007,  0.0056,  -0.1394, 0.0313,  0.6509,  0.2982,  0.0372,  -0.5981, 0.0409,  -0.1992, 0.0970,  -0.0741, -0.1231,
    0.6188,  -0.4059, -0.1233, 0.1169,  -0.0358, -0.1287, -0.0315, -0.3804, 0.0910,  -0.1060, -0.3911, -0.5517, 0.0205,
    0.0867,  0.1246,  -0.5551, -0.0812, -0.5630, 0.0574,  -0.0431, -0.0245, 0.0330,  -0.4598, -1.1422, 0.4267,  0.1674,
    0.0214,  -0.8614, 0.0042,  -0.1083, 0.0703,  -0.0943, 0.0497,  0.0897,  -0.1130, -0.0079, -0.0142, -0.0638, -0.5849,
    0.1735,  -0.2410, -0.0155, -0.0939, 0.0053,  -0.5664, 0.0491,  -0.0338, 0.0471,  0.1532,  -0.1419, -0.1826, -0.0635,
    0.2390,  -0.7081, 0.3638,  0.0147,  -0.7250, -0.4625, -0.1608, -0.0196, -0.0033, -0.6911, 0.0975,  0.1886,  0.0089,
    0.0693,  0.0860,  -0.4273, 0.0518,  0.5197,  0.1864,  0.0112,  0.8208,  0.2293,  -0.3409, -0.0108, -0.0974, -0.2705,
    0.0036,  -0.2732, -0.4524, 0.0075,  0.2557,  -0.2133, -0.3366, 0.0081,  -0.0259, 0.0110,  -0.1841, -0.0140, -0.0712,
    -0.0535, 0.2183};

constexpr std::array<float, L2_SIZE> input_biases = {0.5673, 0.6830, 0.7599, 0.1853, 0.2890, 0.5579, 0.3147, 0.1729};

constexpr std::array<float, L2_SIZE> l2_weights = {0.5256, 0.5128, 0.5294, 0.6619, 0.8028, 0.4358, 0.3400, 0.4064};

constexpr float l2_bias = 0.0597;

constexpr std::array<float, INPUT_SIZE> means = {
    5.873001556250942,    7.0769591191284995,    0.89205977342325,     0.07992770963369535,
    0.3283488679529443,   0.3779347043959906,    0.016196723506082766, 0.8630298365099818,
    11.102294215097308,   463.1521695476832,     463.73294064492376,   60.0,
    0.10219715858699108,  -27.765171773289378,   490.3671865325725,    5.873001556250942,
    -999.3641141920045,   -3.1980019745979686,   3.5391673220770095,   0.02661021770779297,
    0.042892284007429844, 0.0009939925366890343, 0.2818621462875885};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.4709338072315,    6.314939660007748,   0.31030490499395885, 0.27118125094926276,
    0.5919975408888929, 0.4848711824898504,  0.12623149232164801, 0.34381584867998144,
    11.728214320710311, 4047.8403573654696,  4047.707347536442,   1.0,
    0.3029074105460882, 48.31856764762306,   3994.6263819107044,  3.4709338072315,
    13344.014832925714, 38.79855564109659,   411.5988669779852,   0.16094133720501033,
    0.2026142541383893, 0.03151197416103983, 0.4499065200436003};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return result;
    }

    std::array<float, L2_SIZE> output;
};