#pragma once

#include <array>

constexpr int INPUT_SIZE = 22;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    0.2795,  0.1600,  0.5057,  -0.5031, -0.1528, 0.0044,  0.3456,  0.0378,  0.1071,  -0.1440, 0.3430,  0.5495,  0.0921,
    -0.0903, 0.0720,  -0.4069, 0.0186,  -0.1393, -0.0707, -0.1354, -1.3417, -0.0233, 0.7435,  0.1009,  -0.8191, -2.5304,
    -0.1208, -0.0115, -1.0657, 0.0379,  0.0707,  -0.0787, 0.1387,  -0.0578, 0.0461,  -0.0167, -0.0109, -0.3778, -0.0197,
    0.0499,  -0.0378, -0.2174, 0.0290,  0.0124,  0.2982,  0.0874,  0.2823,  0.9978,  -0.0699, -0.0205, -0.0881, -0.0810,
    -0.4024, 0.0019,  -0.0753, 0.0195,  0.0011,  -0.0745, 0.1477,  -0.0831, -0.0372, 0.1178,  -0.0253, 0.3955,  0.1054,
    1.4128,  0.1863,  -0.0138, -0.1917, -0.9364, -0.0229, -0.0090, 0.0491,  0.0521,  -0.1885, -0.1538, 0.1115,  -0.0511,
    0.0880,  0.1397,  -0.1557, -0.5415, 0.0965,  -0.4621, 0.0063,  -0.6622, -0.8284, 1.0700,  -0.3650, -0.0058, -0.3423,
    0.7920,  0.0285,  0.0061,  -0.0333, 0.0485,  0.0806,  -0.0526, -2.3411, -0.2670, 0.0470,  -0.0089, 0.0739,  -0.2081,
    0.1188,  -0.1132, 0.0418,  -0.4191, -0.0752, -1.6982, 0.1454,  -0.0237, 0.8227,  0.2413,  -0.0741, 0.0109,  -0.3243,
    0.1366,  1.5286,  -0.1042, -0.5791, 0.2470,  0.1282,  -0.0098, 0.0521,  -0.1733, 0.0422,  -0.0382, -0.0123, 0.4549,
    -0.0928, 1.2839,  -0.0810, 0.0886,  2.1808,  -1.2553, 0.0537,  -0.0035, -0.0762, -0.0649, 0.0989,  0.1456,  -0.4624,
    -0.2826, -0.1139, 0.0931,  -0.1564, 0.6236,  0.0255,  -0.0766, -0.0199, 0.0699,  -0.7820, -0.7119, 0.0486,  0.1421,
    1.9799,  0.5129,  -0.4264, -0.0098, -0.1296, -0.0433, 1.0234,  -0.2636, -0.1563, 0.2119,  0.1795,  -0.0650, 0.1451,
    -0.4116, 0.1191,  -0.6543, -0.1242, -0.5949, 0.1863,  -1.0459};

constexpr std::array<float, L2_SIZE> input_biases = {1.3695,  -0.1990, -0.5443, 0.8030,
                                                     -0.0471, 0.0550,  0.3879,  -0.5286};

constexpr std::array<float, L2_SIZE> l2_weights = {0.7878, 1.0222, 1.4307, 0.6450, 1.2317, 0.9811, 0.9410, 1.0520};

constexpr float l2_bias = -4.6175;

constexpr std::array<float, INPUT_SIZE> means = {
    5.80530259786069,     7.208684812857669,   0.8565985795053083,  0.2086786929134384,  0.28543086076459245,
    0.32941183997792367,  0.04104340598263494, 0.8158998376545703,  5.926216005100695,   24.4955680476599,
    1226.3420086324595,   1226.7263845261105,  0.16032445718876467, 0.1563965657098412,  0.5317038147281465,
    -1941.3231133046474,  -8.189126861993032,  53.52565341531833,   0.04634439040348236, 0.11549864749232504,
    0.012341145720322999, 0.2965032307741952};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.178183377749487,   6.452490500550528,   0.35048174431030843, 0.40636424059872356, 0.6819642909324457,
    0.46999965921294296, 0.19839063689594708, 0.3875658557842992,  0.9785752605687409,  28.715065471380125,
    6373.262636183912,   6374.761566089676,   0.3669066987885237,  0.36323089067975545, 0.4989938558055432,
    10054.055040442177,  237.64773668235068,  1382.5285804339223,  0.21022984536362088, 0.3196227618924671,
    0.11040308801221424, 0.4567155185831324};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return round(result);
    }

    std::array<float, L2_SIZE> output;
};