#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    -0.0380, -0.0058, -0.8562, 0.8057,  -0.0206, -0.0151, 0.4003,  -0.0289, -0.0220, 0.0863,  0.0852,  0.3247,  0.4413,
    -0.0143, -0.0190, 0.0805,  -0.0777, 0.0020,  0.0060,  -0.0319, -1.3349, 0.2037,  0.2313,  0.1533,  0.1282,  0.2674,
    -0.2658, -0.4245, -0.0235, -0.0441, 0.0508,  0.2300,  0.1578,  -0.4481, -0.0360, 0.0719,  -0.0019, -0.0303, 0.0276,
    -0.8095, 0.2442,  -0.6435, -0.1169, -0.0591, -1.1721, 0.5859,  0.2176,  -0.0291, 0.1744,  -0.6636, -0.1461, -0.0098,
    -0.6360, 0.0024,  0.0761,  0.0917,  -0.3215, -1.5511, -0.1859, -0.0014, -0.0657, 0.3899,  -0.6904, 0.0006,  0.1060,
    -0.0444, 0.0931,  0.0782,  0.0088,  -0.0117, 0.0123,  -0.0396, 0.5167,  -0.0394, 0.0078,  0.3515,  0.2440,  0.0139,
    0.0742,  0.0172,  -2.3690, -0.4866, 0.0130,  -0.0471, 0.0791,  0.0031,  0.2025,  -0.1164, 0.0174,  0.3088,  0.1444,
    0.0704,  -1.3412, 0.1592,  0.1329,  -0.0837, -0.3492, -0.0070, 0.6702,  0.0368,  0.1816,  0.0920,  -0.3409, -0.2896,
    -0.4652, 0.0021,  -0.0128, 0.0298,  -0.6383, 0.0775,  -0.0056, -0.0591, -0.0818, 0.0386,  0.4409,  -0.0875, 0.1507,
    -0.2747, -1.4686, 0.0088,  0.0052,  -0.5180, 0.1432,  -0.0064, 0.0779,  0.1194,  -0.0411, -0.0745, -0.0010, 0.2087,
    -0.6011, -0.0354, 0.0338,  -0.0281, 0.0328,  -0.5434, -0.3826, -0.0205, -0.0794, -0.1207, -0.7650, 0.4774,  -0.0344,
    -0.0132, 0.2058,  0.0283,  -0.0843, 0.1602,  0.1636,  0.0439,  0.2742,  0.0045,  0.0495,  -0.0783, 0.2898,  0.0105,
    -0.0197, -0.0476, -0.9250, 0.3210,  0.0029,  0.0593,  0.2430,  1.4141,  -0.0763, -0.1444, 0.0098,  0.1932,  -0.1812,
    0.1042,  0.1767,  -0.1638, -1.6057, -0.1492, 0.0052,  -0.1024, 0.1943,  0.1848,  0.1049,  -0.0140, -0.0770, -0.0031,
    0.0377,  0.0984};

constexpr std::array<float, L2_SIZE> input_biases = {0.4520, 1.1752, 0.8531, -0.1033, -0.8908, 0.2345, -0.7169, 0.0149};

constexpr std::array<float, L2_SIZE> l2_weights = {0.9050, 1.2248, 0.7540, 0.7326, -2.1838, 0.8238, -1.2546, 0.9131};

constexpr float l2_bias = -1.0001;

constexpr std::array<float, INPUT_SIZE> means = {
    6.027160581624969,  7.056136874145829,     0.8678997620778944,  0.15935916614772533, 0.24624019227289173,
    0.3227743364545601, 0.043345471119212074,  0.8254706063292647,  0.15276941515893883, 5.933370971176647,
    33.64744647149185,  1268.0877115525927,    1268.027981326307,   1083.3541520573276,  -20.87851432126107,
    0.5309353594495552, -1978.157223035682,    -33.397043865095426, -2.723040506770516,  0.04660544943272914,
    0.083368043250297,  0.0066943103451238654, 0.2978627723880286};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.439608005721274,   6.386254429650978,   0.3385997121425661,  0.3660106860631626,  0.6983716889781799,
    0.46753723293538707, 0.203633595589396,   0.37956407155533145, 0.35976509134563706, 0.9385652321883257,
    45.27771792679855,   6551.724233178019,   6553.746367480393,   7084.333508689471,   45.35110313552379,
    0.49904208593637356, 10307.642222733297,  319.2284577721373,   994.4975574355446,   0.21079227100608428,
    0.2764377192333087,  0.08154444526837532, 0.4573188616417934};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return round(result);
    }

    std::array<float, L2_SIZE> output;
};