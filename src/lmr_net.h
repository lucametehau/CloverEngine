#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    0.0352,  0.5687,  -0.2807, 0.4743,  -0.2195, -0.0131, -0.0882, 0.0494,  0.1797,  0.1214,  -0.1695, -2.0084, 0.1235,
    -0.0053, -0.0933, 0.3900,  -0.4187, 0.0727,  0.0225,  -0.0434, -0.1204, 0.1049,  0.5412,  0.1418,  0.3074,  1.0011,
    -1.2742, -0.2347, -0.0248, -0.5632, 0.1024,  0.1793,  0.2292,  -0.2097, 0.6056,  -0.0918, -0.0136, -0.0647, 0.1960,
    -0.8206, -0.0234, 0.0526,  -0.0134, 0.0027,  0.1704,  0.3697,  0.1983,  0.3973,  2.2879,  -0.0574, -0.5095, -0.0241,
    0.3440,  -0.0025, 0.2615,  0.4408,  -0.3109, -0.4007, 0.0843,  -0.0088, -0.1302, 0.3184,  -0.6845, 0.0168,  -0.0109,
    -0.1349, -0.2409, 0.0494,  0.5556,  -0.3115, 0.6943,  -0.0819, -0.0266, -0.1429, -0.0187, 0.3391,  0.0244,  0.0290,
    0.1979,  -0.0101, -0.8130, -2.2684, -0.0109, -0.0306, 0.0553,  -0.0640, 0.1049,  -0.0195, -0.0499, -0.0054, 0.0050,
    0.0643,  -0.0248, 0.0301,  0.0079,  -0.1277, -0.0468, 0.0064,  1.1815,  0.4294,  0.0392,  0.1177,  -0.0190, -2.7413,
    -1.4334, 0.0057,  0.0188,  -0.0279, -0.0661, 0.2096,  -0.4249, -0.0096, -0.0006, 0.0149,  0.0839,  0.1423,  0.1925,
    -0.6210, -1.4305, -0.3067, -0.0192, 0.0245,  0.1152,  0.2336,  0.1174,  -0.2933, -0.0877, 0.0946,  -0.0280, -0.0365,
    0.1641,  -1.3052, 0.0286,  -0.1728, 0.0010,  -0.1670, 0.0894,  0.4689,  -1.2503, 0.1695,  0.1666,  -0.1509, -0.3732,
    -0.0051, 0.3751,  0.0505,  0.2250,  0.0743,  -0.2628, -0.3136, -0.1802, 0.0061,  -0.0155, 0.0373,  -0.6680, 0.0421,
    -0.0001, -0.0607, -0.1558, 0.0746,  0.5216,  0.0626,  0.4704,  0.0960,  -1.8800, -0.1876, -0.0093, 0.2394,  -0.0119,
    0.1186,  0.0709,  -0.1161, -0.2234, -0.0392, 0.0091,  0.0864,  -0.3366, -0.4087, -0.0169, 0.2195,  -0.0673, -0.1184,
    -0.1391, 0.2023};

constexpr std::array<float, L2_SIZE> input_biases = {-0.0462, -1.2174, 0.7245,  -0.5129,
                                                     -0.6528, -0.8060, -0.8364, -0.1090};

constexpr std::array<float, L2_SIZE> l2_weights = {0.6967, -1.6181, 1.1544, -0.9277, 1.0620, 0.8421, -1.8486, 0.8642};

constexpr float l2_bias = 0.9710;

constexpr std::array<float, INPUT_SIZE> means = {
    5.452467080606962,   7.112796656718116,    0.8578524521488929,  0.2580247593890559, 0.3140062440636067,
    0.3301769348864686,  0.038723504354787004, 0.820671299053199,   0.1572143583836538, 5.921183065777163,
    21.84792463987609,   1166.1757456820978,   1167.0037809233131,  732.9955358915151,  -19.418957825610615,
    0.5227610872420946,  -1503.2052281145216,  -2.0642034078674727, 126.43629579725577, 0.043985748508458045,
    0.15268151661182816, 0.02280523060314052,  0.3006139186091227};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    2.856556473540784,   6.308056910658986,   0.3492014067712561, 0.43754769217912187, 0.6693623705907236,
    0.47027664895829696, 0.1929352082054279,  0.3836273164981005, 0.36400275260177606, 0.9771860382278457,
    25.544261692591324,  6194.445366321299,   6196.782098044113,  7325.809065093816,   43.69528704433516,
    0.49948166423559315, 9047.625746073467,   214.0488170007344,  2000.5239829554266,  0.20506341076995852,
    0.35968023450968256, 0.14928212237330396, 0.4585250162723845};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return round(result);
    }

    std::array<float, L2_SIZE> output;
};