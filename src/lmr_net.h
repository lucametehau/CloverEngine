#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    0.1873,  0.2298,  1.4278,  -0.0485, -0.3875, -0.0386, 0.1877,  0.0700,  -0.3089, -1.9933, -0.5085, 0.0040,  0.2030,
    -0.0672, -1.2111, -0.0881, -0.7509, 0.5371,  -3.6129, -0.1150, -0.3537, 0.0775,  0.5318,  -0.1231, -0.0103, 1.0950,
    -0.8157, 0.0791,  -0.0438, -1.2391, 0.1930,  -0.1147, -0.3692, -0.8348, 0.0014,  0.0373,  -0.0100, -0.2672, -0.1080,
    -0.6946, 0.0097,  0.1644,  0.0528,  -1.2680, -0.5753, 0.2240,  0.0282,  -0.2848, -1.0830, 0.6087,  0.2466,  0.0131,
    0.1318,  -0.0844, 0.2045,  0.8051,  0.0490,  -0.0077, -0.1225, 0.0135,  0.4101,  -0.2201, 0.6997,  -0.0786, 0.1422,
    0.0180,  0.7856,  0.1932,  -0.3533, 0.3742,  -1.5428, -0.1624, -0.1407, 0.1393,  0.0593,  -0.4111, -0.0132, -0.0318,
    0.4937,  -0.1654, -0.0191, -0.0164, 0.0353,  0.0024,  0.1840,  0.0914,  -0.0080, 0.1046,  0.0058,  0.0929,  -0.0374,
    0.0671,  0.1995,  -0.2717, -0.8866, 1.0433,  0.1127,  0.0215,  0.5713,  -0.1331, 0.1212,  0.0715,  0.3552,  -0.0094,
    -0.0043, -0.0382, 0.2434,  -0.1647, 0.6761,  -0.0426, 0.2334,  -0.0263, 1.3122,  0.2009,  -0.1165, -0.0694, -0.3994,
    -0.4378, -0.4065, 0.3536,  0.0038,  -1.3128, 0.1029,  0.0670,  -2.3507, -1.6465, -0.0078, -0.0534, 0.0550,  0.2598,
    0.0101,  0.0519,  0.2566,  -1.4633, 0.0718,  -0.8689, -0.9982, 0.0254,  0.2375,  0.3701,  0.1626,  -0.7799, -0.4221,
    -0.0056, 0.1254,  0.0965,  -0.2880, -0.0184, 0.6061,  0.0154,  0.2418,  0.0228,  0.0085,  -0.0786, -0.9841, 0.1518,
    -1.4617, -0.0581, -1.1035, -0.5959, 0.5261,  -0.6871, 0.2432,  0.2294,  -0.2317, -0.4772, -0.0028, 0.9462,  0.0432,
    -0.3289, -0.4129, -0.6660, 0.0001,  0.2728,  0.0109,  -0.0304, -0.8991, -0.7361, 0.0653,  -0.0071, -0.0621, -0.2482,
    0.0678,  0.6508};

constexpr std::array<float, L2_SIZE> input_biases = {0.0981, 1.0071, 0.1100, -0.4323, -1.5945, 1.3294, 0.7248, -1.0714};

constexpr std::array<float, L2_SIZE> l2_weights = {1.2441, -1.1810, -1.3724, -0.6775, 1.3642, 0.9092, 1.0556, -1.4311};

constexpr float l2_bias = 1.1807;

constexpr std::array<float, INPUT_SIZE> means = {
    5.452467080606962,   7.112796656718116,    0.8578524521488929,  0.2580247593890559,  0.3140062440636067,
    0.3301769348864686,  0.038723504354787004, 0.820671299053199,   21.84792463987609,   1166.1757456820978,
    1167.0037809233131,  433.1802097905827,    0.1572143583836538,  -19.418957825610615, 578.564075718011,
    5.452467080606962,   -1503.2052281145216,  -2.0642034078674727, 126.43629579725577,  0.043985748508458045,
    0.15268151661182816, 0.02280523060314052,  0.3006139186091227};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    2.856556473540784,   6.308056910658986,   0.3492014067712561,  0.43754769217912187, 0.6693623705907236,
    0.47027664895829696, 0.1929352082054279,  0.3836273164981005,  25.544261692591324,  6194.445366321299,
    6196.782098044113,   3867.0979157752686,  0.36400275260177606, 43.69528704433516,   4383.0540528933325,
    2.856556473540784,   9047.625746073467,   214.0488170007344,   2000.5239829554266,  0.20506341076995852,
    0.35968023450968256, 0.14928212237330396, 0.4585250162723845};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return result;
    }

    std::array<float, L2_SIZE> output;
};