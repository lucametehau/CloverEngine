#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    -1.2403, 0.1517,  0.1795,  -0.0257, -0.3498, -0.0343, 0.1902,  0.0192,  0.1600,  0.1627,  -0.3184, 0.3211,  -0.7450,
    0.0123,  0.1704,  0.0427,  -0.8291, 0.0306,  -0.0282, -0.0900, -0.1277, 0.0511,  0.3713,  0.1728,  0.0520,  0.1893,
    0.7219,  0.0062,  -0.0143, -2.4250, 0.0317,  0.0146,  0.0246,  -0.1034, 1.8615,  0.4332,  0.0013,  -0.0542, -0.0206,
    -0.3863, -0.1722, 0.0086,  -0.0054, -0.8155, 0.0367,  0.0436,  0.2651,  0.2807,  -0.1105, 0.5276,  -0.1487, -0.0430,
    1.2554,  0.0529,  0.0704,  0.1725,  -0.2905, -0.1829, 0.4443,  0.0259,  0.1277,  -0.4947, -0.7138, -0.0926, 0.0108,
    -0.1182, -1.5742, 0.0131,  0.4162,  -0.2342, 0.2311,  -0.2623, 1.0496,  -0.2633, -0.1187, 0.3022,  0.0233,  -0.0202,
    0.1212,  -0.0272, 0.1910,  0.1122,  -0.0037, 0.1278,  -0.4016, 0.1692,  0.0364,  -0.0311, -0.1930, -0.9884, 0.0793,
    -0.5189, 0.1425,  0.0618,  0.0339,  0.0974,  -0.2030, -0.0414, 0.1472,  0.0738,  0.1457,  0.1010,  -0.3356, -3.2357,
    0.4527,  0.0241,  0.1321,  0.6877,  -0.9907, 0.4129,  -0.9191, -0.1512, -0.1598, 0.0898,  0.5368,  0.2031,  -0.1937,
    -0.0597, -1.2201, -0.0025, -0.0183, -0.9981, 0.0378,  -0.0629, 0.0218,  -0.0897, 1.0553,  0.6540,  0.0088,  0.0539,
    -0.1861, -0.1664, -0.1967, 0.0319,  -0.0157, 0.4853,  -0.1590, 0.5471,  0.0096,  0.2039,  1.2119,  0.2921,  -0.0934,
    -0.0091, 1.0258,  -0.0166, 0.0463,  0.1576,  -0.0818, -4.1007, 0.1140,  0.0154,  -0.0208, 0.0562,  -0.0874, 0.4401,
    -0.7318, -0.1236, -0.2661, -0.0069, 0.0499,  0.1100,  -0.0551, -0.0453, 1.4751,  -0.2866, -0.0756, -1.2847, 0.0624,
    0.1356,  0.1365,  -0.2226, -0.7595, 1.3128,  0.0193,  -0.0407, -0.1036, -0.3967, 0.0612,  0.0632,  -0.0654, -1.2873,
    0.0611,  -0.5317};

constexpr std::array<float, L2_SIZE> input_biases = {-0.7376, -0.1798, 0.6940,  -1.0079,
                                                     -0.2773, -0.7787, -0.9650, 0.0765};

constexpr std::array<float, L2_SIZE> l2_weights = {-1.4100, -2.8761, 1.1572, -1.1393, 0.8428, -1.9643, 2.2564, 0.8866};

constexpr float l2_bias = 1.0143;

constexpr std::array<float, INPUT_SIZE> means = {
    5.287131449568652,   6.097867209293204,    0.8571692523772905,  0.1468560208737975,  0.3350547859114135,
    0.3678122012528814,  0.0641577066928091,   0.8074688847585924,  0.12986288047475733, 5.839244657613845,
    27.797688520991368,  2008.4156223354987,   2008.9073594188885,  1675.5002304006555,  -28.530641056597517,
    0.4536781294478061,  -783.4439040856663,   -13.558663873232984, 28.31401759818609,   0.07915540454507349,
    0.08212784252974901, 0.008272861293600699, 0.4473523813984976};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.024049776698237,  5.776365285756775,   0.34990016455590206, 0.35396232851380194, 0.6577342710533335,
    0.4822098981381356, 0.24503366169718105, 0.3942878198794727,  0.3361525141205344,  1.0103310001146701,
    36.690848079521345, 7861.516610340242,   7863.698656016059,   8655.149526835572,   48.271963186596025,
    0.4978496603479267, 10218.673965206252,  394.45228704305333,  1183.659209021338,   0.26998115948410034,
    0.2745593925021646, 0.09057825930993356, 0.4972205026500724};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return round(result);
    }

    std::array<float, L2_SIZE> output;
};