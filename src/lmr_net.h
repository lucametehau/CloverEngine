#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    0.0594,  0.0118,  1.0205,  0.1400,  0.1605,  0.0196,  -0.4851, -0.0872, 0.0298,  -1.3441, -0.9046, 0.0417,  -0.0487,
    -0.0476, -0.0011, 0.0818,  0.7834,  0.0678,  -0.5273, -0.0565, -0.2598, -0.5789, -0.2386, 0.9316,  -0.0276, -0.1487,
    -0.0060, 0.0717,  -0.0161, 0.0688,  -0.0010, 0.0227,  0.1223,  -0.0243, 0.0645,  -0.0657, 0.0082,  -0.0389, 0.7951,
    0.1516,  0.1284,  -1.3456, -0.0492, -0.0803, -1.8891, -0.1123, 0.9276,  -0.1753, -0.1795, 0.0877,  0.4197,  -0.0018,
    -0.2014, -0.0215, 0.1476,  0.0860,  0.1368,  0.1145,  -0.2211, -0.0134, 0.0096,  0.9356,  1.1083,  -0.0081, -0.0116,
    0.0029,  0.0369,  -0.8281, -0.6092, 0.0163,  0.2467,  0.1766,  -0.2553, -0.2526, -0.0118, -1.0605, 0.0726,  -0.0989,
    -0.6900, -0.1568, 0.0564,  0.1058,  0.0083,  -0.0028, 0.1920,  -0.7789, 0.0211,  0.0113,  -0.0195, 0.4733,  0.1350,
    0.2671,  0.2209,  -0.1442, -0.0409, -0.0033, 0.1467,  -0.0052, 0.1993,  0.0050,  0.0188,  0.0901,  0.0307,  0.1346,
    -0.0352, 0.0085,  0.0335,  0.1269,  0.1736,  0.1239,  -1.2593, -0.8422, 0.0820,  -0.7401, -0.1706, 0.0623,  0.2077,
    -0.5035, 0.0265,  -0.1116, 0.0351,  -0.9541, 0.0421,  -0.0708, -0.4807, -0.2934, -0.0302, 0.0398,  0.0496,  -0.0566,
    -0.0611, -0.6144, 0.0132,  -0.0223, -0.0378, -0.7685, -0.3182, 0.3247,  0.0017,  0.2369,  -0.3444, -0.0165, 0.2888,
    0.0180,  -1.0499, 0.0918,  0.1764,  -0.9597, -0.5143, 0.0103,  -0.1432, 0.0140,  0.0655,  0.2956,  0.5743,  0.0888,
    -0.8861, 0.2400,  0.0514,  -1.2548, -0.3375, -0.0885, -0.2493, 0.6873,  0.1050,  -0.4243, -0.0285, 0.2400,  -0.0783,
    -0.1045, 0.0168,  -0.1727, 0.0219,  0.2126,  -0.0360, -0.0175, 0.2176,  -0.8413, 0.0834,  -0.9305, -0.1029, -0.1936,
    -0.7313, 0.4359};

constexpr std::array<float, L2_SIZE> input_biases = {0.5231, 2.0057, 1.0106, 1.0294, 0.5888, 0.7785, 1.2446, 0.8324};

constexpr std::array<float, L2_SIZE> l2_weights = {0.9961, 1.3811, -1.5206, 0.7977, 0.5308, 0.5471, 0.6945, 0.7295};

constexpr float l2_bias = -2.2740;

constexpr std::array<float, INPUT_SIZE> means = {
    5.873001556250942,    7.0769591191284995,    0.89205977342325,     0.07992770963369535,
    0.3283488679529443,   0.3779347043959906,    0.016196723506082766, 0.8630298365099818,
    11.102294215097308,   463.1521695476832,     463.73294064492376,   60.0,
    0.10219715858699108,  -27.765171773289378,   490.3671865325725,    5.873001556250942,
    -999.3641141920045,   -3.1980019745979686,   3.5391673220770095,   0.02661021770779297,
    0.042892284007429844, 0.0009939925366890343, 0.2818621462875885};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.4709338072315,    6.314939660007748,   0.31030490499395885, 0.27118125094926276,
    0.5919975408888929, 0.4848711824898504,  0.12623149232164801, 0.34381584867998144,
    11.728214320710311, 4047.8403573654696,  4047.707347536442,   1.0,
    0.3029074105460882, 48.31856764762306,   3994.6263819107044,  3.4709338072315,
    13344.014832925714, 38.79855564109659,   411.5988669779852,   0.16094133720501033,
    0.2026142541383893, 0.03151197416103983, 0.4499065200436003};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return result;
    }

    std::array<float, L2_SIZE> output;
};