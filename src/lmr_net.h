#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    1.1604,  -0.1188, -0.0745, 0.0897,  0.2726,  0.0118,  -0.4084, -0.0343, -6.2985, -1.8310, 1.9416,  0.1869,  0.1136,
    0.0724,  -0.2930, -1.1070, 0.4540,  0.0437,  -0.0202, 0.0232,  0.0452,  -0.0375, -0.4361, 0.0916,  0.0649,  0.0420,
    -0.1498, -0.1239, -0.0115, 0.1269,  0.0351,  -1.4751, 3.5074,  -3.8239, -0.1683, 0.1090,  -0.0265, -0.0552, -0.1039,
    -0.2781, 0.1388,  -0.4970, -0.0568, -0.0813, -0.0678, 0.0876,  0.0435,  0.0122,  -0.0087, -0.6137, 0.0303,  0.0074,
    -0.0177, -0.0021, 0.0250,  2.7593,  -2.7053, 0.0044,  0.0080,  0.0069,  0.0351,  -0.3570, 0.0458,  0.1085,  -0.3743,
    0.0116,  -0.0460, 0.1562,  -0.0507, 1.2494,  -0.1363, -0.0785, 0.0845,  0.3043,  0.0193,  0.3866,  -0.0331, 0.0618,
    1.8599,  -5.7812, -0.5270, 0.1742,  0.1056,  -0.4092, -0.9734, 0.4548,  0.1598,  -0.2542, 0.0176,  0.1399,  -0.0780,
    -0.4559, 0.0715,  -0.0037, 0.8948,  0.0871,  -0.0313, -0.0041, 0.1242,  -0.0332, -0.4028, 2.9150,  -3.4495, -0.0536,
    -0.0478, 0.0112,  -0.0073, -0.0575, 0.0505,  0.3243,  -1.0688, -0.0280, -0.0610, 0.0439,  -0.0191, 0.1854,  -0.0152,
    -0.0036, -0.0465, 0.0674,  0.0046,  -0.1893, 0.0287,  -0.2624, 3.0110,  -3.7748, 0.0048,  -0.0702, 0.0504,  -0.0085,
    -0.1197, 0.0538,  0.1076,  0.0026,  -0.0031, 0.0091,  0.0074,  -0.0504, 0.4491,  0.0231,  -0.0340, 0.0156,  0.0889,
    0.0059,  -0.0919, 0.0043,  -0.3437, 2.7866,  -3.5297, -0.0077, 0.1221,  0.0272,  -0.0127, -0.2833, 0.0557,  0.2107,
    -0.6422, 0.0141,  -0.0477, -0.0520, -0.0275, 1.0001,  0.0060,  -0.0335, 0.0399,  0.0411,  0.0022,  0.3008,  -0.0025,
    -0.6959, 2.4333,  -4.3965, -0.2657, 0.0301,  -0.0005, -0.0101, -0.5184, 0.0778,  0.0076,  0.0257,  0.0184,  -0.0012,
    -0.0166, -0.0414};

constexpr std::array<float, L2_SIZE> input_biases = {-1.8470, -0.2677, -0.4542, -0.2988,
                                                     -0.5139, -0.0724, 0.2392,  0.2968};

constexpr std::array<float, L2_SIZE> l2_weights = {-5.3741, 2.0202, 5.0535, 2.6503, 3.8350, 1.1583, 1.3822, 1.9477};

constexpr float l2_bias = 0.9561;

constexpr std::array<float, INPUT_SIZE> means = {
    5.3897262980548,     6.283449086538792,    0.8503439266906317, 0.16171397372862945, 0.32162046016455903,
    0.35808620904068605, 0.05581650743961103,  0.806388677051369,  9.530289941625888,   865.775121250797,
    879.9650403169446,   990.7143903443475,    881.9560343349677,  662.3135681115664,   639.7501130590905,
    1.5028460061238345,  -700.6528841160466,   7.2202216103988945, 53.803967306498144,  0.07525829653748593,
    0.09033082829245674, 0.009257409562622238, 0.4154321127812078};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.079945004417443,   5.958497886805035,   0.35673398076296187, 0.36818821875438335, 0.6653416681947776,
    0.47943766637129825, 0.2295670380016584,  0.39512780030606776, 30.113432134708418,  5114.3561310097875,
    5113.90735413281,    5799.314670168664,   5442.181650216963,   6096.507943341796,   4555.490615742364,
    2.0474194736701055,  10254.872548598589,  356.79865481074995,  1231.09126093491,    0.26380766732557603,
    0.2866551408093974,  0.09576904474208793, 0.49279638031478024};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return round(result);
    }

    std::array<float, L2_SIZE> output;
};