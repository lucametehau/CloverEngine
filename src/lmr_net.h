#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    0.5978,  -0.2033, -0.2379, 0.0735,  -0.0949, -0.0218, -0.6756, -0.0331, 0.0896,  -0.6546, -1.6572, 0.1478,  -0.0871,
    0.0003,  -0.6602, 0.6909,  0.2926,  0.0414,  -0.0011, -0.8033, -0.1021, -0.6722, -0.3853, 0.6752,  -0.4314, 1.6106,
    0.1225,  0.1967,  0.0276,  -0.8174, -0.1103, 0.0493,  -1.7358, -0.8819, -0.1321, -0.0351, -0.0200, -0.7462, 0.5760,
    0.7728,  0.1711,  -1.5184, -0.0545, 0.1268,  -0.8502, -0.1515, 0.7116,  -0.2506, -0.1892, 0.0869,  0.4394,  0.0034,
    -0.1937, -0.0374, 0.1292,  0.1731,  0.1617,  -0.1286, -0.2139, -0.0105, -0.6020, 1.0777,  1.1050,  -0.0054, -0.0064,
    -0.0064, 0.1098,  -0.2391, -0.5869, 0.7443,  0.3058,  -1.1850, 0.0194,  0.1227,  0.0066,  0.5020,  -0.0157, 0.0547,
    0.2992,  0.4737,  0.1022,  -0.0620, 0.0228,  -1.6416, 0.5414,  0.1865,  0.0104,  0.0376,  0.2001,  -0.0966, 0.0507,
    -0.2647, 0.3859,  -0.5063, -1.0651, 0.0782,  0.0821,  -0.0127, -1.2199, 0.0063,  0.0852,  -1.4533, -0.5893, -0.1166,
    -0.1117, -0.0200, 0.0819,  0.6260,  0.4019,  0.1917,  -1.8929, -0.9243, -0.0356, -0.7509, -0.3089, -0.0922, 0.4507,
    0.3430,  -0.1795, -0.4726, -0.0127, -1.3203, 0.0824,  -0.1601, -1.3261, -0.7512, 0.0152,  0.1880,  0.0179,  0.1429,
    0.2586,  -1.2030, 0.1955,  -1.7854, -0.1111, -0.1655, -0.1366, 0.5859,  -0.0115, -1.4509, -0.1568, -0.0647, -0.0114,
    0.0133,  -0.2124, -0.0069, -0.0062, 0.2417,  -0.3788, 0.1853,  0.0352,  0.0012,  0.2061,  0.2780,  -0.1764, 0.0088,
    -0.0157, -0.5477, 0.0192,  -0.2091, 0.1758,  -0.3584, 0.3214,  -0.9389, 0.0582,  -0.2208, -0.0223, 0.3363,  -0.0113,
    -0.0390, 0.0740,  -0.0407, -0.1514, 0.0468,  -0.0150, -0.1192, -0.6426, -0.0466, 0.0071,  -0.0067, -0.3148, -0.1450,
    -0.4629, 0.0963};

constexpr std::array<float, L2_SIZE> input_biases = {0.2470, 0.7364, 0.9470, 1.6536, 1.4640, 1.4671, -0.3285, -0.4555};

constexpr std::array<float, L2_SIZE> l2_weights = {-0.6722, 1.0312, -1.3594, 0.9384, 0.9875, 1.1193, -0.7854, -1.3376};

constexpr float l2_bias = -0.9172;

constexpr std::array<float, INPUT_SIZE> means = {
    5.873001556250942,    7.0769591191284995,    0.89205977342325,     0.07992770963369535,
    0.3283488679529443,   0.3779347043959906,    0.016196723506082766, 0.8630298365099818,
    11.102294215097308,   463.1521695476832,     463.73294064492376,   60.0,
    0.10219715858699108,  -27.765171773289378,   490.3671865325725,    5.873001556250942,
    -999.3641141920045,   -3.1980019745979686,   3.5391673220770095,   0.02661021770779297,
    0.042892284007429844, 0.0009939925366890343, 0.2818621462875885};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.4709338072315,    6.314939660007748,   0.31030490499395885, 0.27118125094926276,
    0.5919975408888929, 0.4848711824898504,  0.12623149232164801, 0.34381584867998144,
    11.728214320710311, 4047.8403573654696,  4047.707347536442,   1.0,
    0.3029074105460882, 48.31856764762306,   3994.6263819107044,  3.4709338072315,
    13344.014832925714, 38.79855564109659,   411.5988669779852,   0.16094133720501033,
    0.2026142541383893, 0.03151197416103983, 0.4499065200436003};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return result;
    }

    std::array<float, L2_SIZE> output;
};