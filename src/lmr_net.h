#pragma once

#include <array>

constexpr int INPUT_SIZE = 22;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    0.1212,  0.3991,  0.1935,  -2.2528, -0.2837, -0.0176, 0.1675,  0.0144,  0.0536,  -0.2324, -0.3012, 0.0820,  0.1217,
    0.0755,  -0.1318, -0.6849, 0.0548,  -0.0592, -0.0682, -0.1475, -0.0573, 0.2281,  0.1585,  0.2855,  2.0734,  -0.5020,
    -0.4052, 0.0149,  -0.2270, -0.0317, 0.5592,  -0.2986, -2.6317, -0.7808, 0.1837,  -0.1569, 0.3154,  -0.6331, 0.2022,
    -0.0183, -0.1361, -0.0915, 0.0576,  0.2920,  0.1074,  0.1497,  0.2527,  0.1542,  -0.3276, -0.0244, 0.4473,  0.0377,
    0.0797,  -0.2623, -0.1981, 0.1184,  0.2693,  -0.0454, 0.1398,  -0.6626, 0.0153,  -0.0085, -0.0578, -0.2939, -1.0436,
    0.6450,  -1.3387, 0.1848,  0.1251,  -0.1272, -0.3417, -0.0026, 0.9119,  0.0400,  0.0797,  -0.2890, -0.5590, -0.4582,
    0.2128,  -0.0120, 0.0079,  -0.6782, 0.0655,  0.0057,  -0.0628, -0.1397, 0.0323,  0.4489,  -0.1587, 0.7515,  -0.3832,
    0.1464,  0.1119,  0.0101,  -0.7445, -0.0386, 0.0603,  0.0781,  -2.4528, -0.7456, -0.0723, -0.0111, 0.0358,  0.2836,
    0.1419,  0.0340,  0.0079,  0.2067,  0.0343,  0.0451,  0.1154,  0.0224,  0.6273,  -2.1998, -0.0361, -0.0009, -0.7611,
    0.1521,  0.1362,  -0.1511, -1.5835, -0.5806, 0.1110,  -0.0320, 0.0398,  -0.9180, 0.2184,  -0.4764, 0.0235,  -0.4162,
    0.4803,  0.0547,  0.1253,  0.2016,  1.6644,  -2.2652, -0.1745, -0.0018, -0.7405, 0.0627,  0.2071,  -0.2116, 0.1758,
    -0.6781, 0.1289,  -0.1048, 0.2285,  -0.8075, 0.0501,  -0.1012, -0.0276, -0.4865, -0.4435, 0.1942,  -0.2500, 0.6621,
    -0.0747, 0.0008,  -0.0475, 0.0007,  0.5146,  -0.0642, 0.1675,  0.0327,  -1.5936, -2.8569, -0.0078, 0.0106,  -0.0042,
    -0.0054, 0.2417,  -0.0178, -0.0324, -0.0023, -0.0461, -0.0341};

constexpr std::array<float, L2_SIZE> input_biases = {0.1245, 0.2338, 1.2253, -0.9936, 0.6881, 0.6972, 0.0825, -0.7080};

constexpr std::array<float, L2_SIZE> l2_weights = {1.0379, 1.3380, 0.9375, -2.0775, 0.5964, 1.0669, -1.9759, -1.0226};

constexpr float l2_bias = -0.1706;

constexpr std::array<float, INPUT_SIZE> means = {
    6.052971661385465,    7.403703288471869,    0.8494777524258209, 0.23117956002582285, 0.2605247239073334,
    0.31164683546799,     0.040395030578402435, 0.8120013453511465, 5.902212252551486,   27.343499132667393,
    1180.0386622133738,   1183.2996298436337,   0.172057413968983,  0.17767998383607414, 0.4826277837187871,
    -1863.4423119095609,  -29.14443551924148,   39.332582014675666, 0.04788994239137398, 0.1303256562898862,
    0.013452279458508484, 0.28066033086767755};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.290717758894745,   6.568045236456167,   0.3575825786575691, 0.4215869673650857,  0.699052522070873,
    0.46316636904116626, 0.19688390508869016, 0.3907110959507992, 1.0093552591133754,  32.82536789572978,
    6335.004738825656,   6339.912684720735,   0.3774303382973989, 0.38224312574601854, 0.49969811496690536,
    10467.99995984764,   343.803490774988,    1476.807450108158,  0.21353335994435366, 0.3366613723053131,
    0.11520119633006727, 0.4493218329270493};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return round(result);
    }

    std::array<float, L2_SIZE> output;
};