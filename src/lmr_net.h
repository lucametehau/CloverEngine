#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 1;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    0.2600,  0.3374,  -0.0813, -0.2071, -0.1444, 0.3920,  -0.9015, -0.1711, 0.1005,  -0.8360, -1.0420, -0.1214, 0.0869,
    0.0473,  0.1458,  0.4283,  -0.2618, 0.0847,  0.0417,  0.0845,  -0.5813, 0.1106,  0.5268,  0.0846,  0.2706,  0.4710,
    0.1137,  -0.3706, 0.0455,  -0.1872, -0.2720, -0.1533, 0.0650,  0.1935,  -0.2025, 0.0179,  0.0359,  0.2835,  0.3527,
    -0.8799, 0.0881,  0.1571,  0.0544,  -0.0896, 0.0790,  -0.3778, 0.4563,  0.0264,  0.6182,  0.1999,  -0.1635, -0.2612,
    0.0786,  -0.1882, -0.1821, 0.0808,  0.0380,  0.1197,  0.0687,  -0.0151, -0.7981, 0.3999,  -0.2380, 0.0190,  -0.2504,
    -0.7265, -0.0950, -0.5678, 0.2329,  0.0802,  0.0041,  0.1450,  -0.3889, -0.0473, -0.3468, -0.7933, 0.1424,  -0.1336,
    -0.8120, -0.5784, 0.2002,  -0.0760, -0.0476, -0.6506, 0.1381,  -0.2269, -0.0704, 0.1044,  -0.7142, -0.6854, -0.8892,
    -0.1848, 0.2449,  0.3876,  0.0431,  0.2315,  -0.1806, -0.4722, -0.9591, 0.3339,  0.1855,  -0.9153, -0.8911, 0.0634,
    0.2453,  0.0324,  -0.7743, 0.5320,  -0.3923, -0.0361, 0.0763,  0.2179,  -0.0486, -0.9926, 0.3714,  0.3295,  0.2973,
    -0.0050, -0.1565, -0.1482, 0.5227,  0.0529,  0.3281,  -0.0683, 0.0448,  0.2135,  0.2051,  -0.0211, 0.1128,  -1.1139,
    0.0990,  -0.4067, 0.0793,  -0.4467, -1.0788, -0.1663, -1.0377, -0.0732, 0.6288,  0.1751,  0.0605,  -0.1435, 0.0479,
    -0.0173, 0.0719,  0.0280,  0.0443,  -0.1193, -0.1187, -0.1177, -0.0993, 0.0367,  -0.1211, 0.3555,  0.2735,  0.0048,
    0.1306,  -0.1367, -0.3600, -0.0596, -0.3166, 0.4551,  0.1879,  0.0575,  0.0371,  0.1226,  -0.0213, 0.0125,  0.0326,
    0.0932,  0.0725,  0.0419,  0.1900,  -0.1464, 0.1580,  -0.1394, 0.5655,  0.2864,  -0.0110, 0.1019,  -0.0769, -0.0667,
    -0.1115, -0.4197};

constexpr std::array<float, L2_SIZE> input_biases = {0.6520, 0.6573, 0.6951, 0.7747, 0.7198, 0.7715, -0.1822, -0.0856};

constexpr std::array<float, L2_SIZE> l2_weights = {0.6822, 0.4851, 0.5007, 0.6476, 0.5094, 0.5222, -0.8019, -0.7255};

constexpr float l2_bias = 0.3496;

constexpr std::array<float, INPUT_SIZE> means = {
    5.873001556250942,    7.0769591191284995,    0.89205977342325,     0.07992770963369535,
    0.3283488679529443,   0.3779347043959906,    0.016196723506082766, 0.8630298365099818,
    11.102294215097308,   463.1521695476832,     463.73294064492376,   60.0,
    0.10219715858699108,  -27.765171773289378,   490.3671865325725,    5.873001556250942,
    -999.3641141920045,   -3.1980019745979686,   3.5391673220770095,   0.02661021770779297,
    0.042892284007429844, 0.0009939925366890343, 0.2818621462875885};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    3.4709338072315,    6.314939660007748,   0.31030490499395885, 0.27118125094926276,
    0.5919975408888929, 0.4848711824898504,  0.12623149232164801, 0.34381584867998144,
    11.728214320710311, 4047.8403573654696,  4047.707347536442,   1.0,
    0.3029074105460882, 48.31856764762306,   3994.6263819107044,  3.4709338072315,
    13344.014832925714, 38.79855564109659,   411.5988669779852,   0.16094133720501033,
    0.2026142541383893, 0.03151197416103983, 0.4499065200436003};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        float result = l2_bias;

        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            result += output[i] * l2_weights[i];
        }
        return result;
    }

    std::array<float, L2_SIZE> output;
};