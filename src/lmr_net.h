#pragma once

#include <array>

constexpr int INPUT_SIZE = 23;
constexpr int L2_SIZE = 8;
constexpr int L3_SIZE = 14;

constexpr std::array<float, INPUT_SIZE *L2_SIZE> input_weights = {
    -1.3644, -1.1278, 1.0206,  -2.3192, 0.7230,  0.0847,  -0.8427, -0.5304, -0.5568, -0.3483, 0.5005,  0.3822,  -0.0206,
    -0.0847, -0.3019, 0.4214,  2.6987,  0.0403,  -1.3150, -0.0156, 0.2112,  -3.1930, -0.8864, -0.7894, -0.1603, 0.4797,
    -1.2475, 0.1412,  -0.0017, -0.5172, -0.2428, -0.1400, -0.6953, 0.1004,  -0.0882, -0.0235, -0.0268, -0.1223, 0.4715,
    0.5191,  -0.1100, 0.2831,  -0.1559, -0.2407, 0.6775,  -0.1650, 0.6111,  1.0831,  6.3153,  -0.9585, -1.0838, -0.0860,
    0.9077,  -0.5732, 0.2373,  1.2895,  -0.3524, -0.8740, -0.2413, -0.1176, -0.5367, 1.1629,  0.5649,  0.1324,  -1.3204,
    -0.7646, -0.2367, -2.4674, -0.0922, 0.6567,  -0.3516, 1.1168,  -2.8420, 1.2625,  -0.0170, -2.4904, -0.0328, -0.8029,
    -0.2047, 0.6705,  1.5678,  0.7615,  -0.0154, -0.0005, 0.4952,  1.1770,  -0.1348, 0.1161,  0.0966,  0.0682,  -0.2076,
    -2.4268, -0.3268, -0.1566, 1.9116,  0.4163,  0.6280,  0.0103,  -2.6196, -0.0405, -0.3410, 2.9545,  0.3471,  1.5875,
    0.9736,  -0.0080, 0.1712,  -0.4585, 0.7914,  0.1019,  -1.7716, 0.1596,  0.0677,  -2.7759, -0.8643, -5.1780, 0.8886,
    0.9899,  -0.8183, -1.2871, -0.0422, 0.5031,  0.1324,  0.7106,  0.2541,  -0.8193, -0.8095, -0.8872, 0.0044,  -0.0609,
    0.1618,  -2.2586, 0.0931,  0.1018,  -0.3949, -0.6466, 0.1484,  1.6584,  0.4645,  1.0740,  1.5166,  -3.1567, -1.7228,
    -0.0183, -0.1615, 0.1377,  0.9393,  0.3474,  -1.3627, -2.3917, -2.1047, 0.0088,  0.0048,  0.1302,  -3.2276, 0.1881,
    0.3255,  -0.4563, -2.1141, 1.0093,  2.7942,  -0.5037, -0.3238, -0.6521, 2.5762,  0.9735,  0.0042,  -0.7321, -0.2458,
    -0.7087, 0.2298,  0.7620,  0.5595,  0.1353,  -0.0044, 0.4596,  -0.8193, 2.0364,  -0.0829, 0.1110,  0.1167,  0.4431,
    -0.4871, -2.1426};

constexpr std::array<float, L2_SIZE> input_biases = {-0.0462, -1.2174, 0.7245,  -0.5129,
                                                     -0.6528, -0.8060, -0.8364, -0.1090};

constexpr std::array<float, L2_SIZE *L3_SIZE> l2_weights = {
    -0.7391,  -6.9954,  -2.2066, -1.8562, -3.9147, -0.8492,  -4.1608, -5.4765, 1.8579,   -0.4906,  -2.1774, 1.6973,
    -0.1735,  1.1274,   -0.7620, 1.7504,  1.0615,  0.1990,   -1.6916, 1.3457,  0.3635,   3.9280,   -2.9254, 0.7616,
    0.2164,   0.6401,   -1.1338, 0.7273,  0.7645,  1.2837,   -1.5108, -0.5511, -0.8461,  0.9834,   -0.4708, -0.0409,
    1.0539,   -0.8439,  -0.7467, -2.0899, -1.9938, 1.1082,   0.2586,  -1.2182, 0.9948,   -3.1319,  -0.1345, -4.0827,
    -2.8196,  0.4984,   0.8273,  -2.4964, 0.1425,  -5.5180,  0.4452,  -6.6292, -3.2755,  -0.9711,  1.2220,  -3.7364,
    -1.6498,  -8.2050,  1.0390,  -8.4438, -3.6620, -2.7087,  1.5038,  -5.4655, -3.8861,  -10.7777, 1.5316,  -11.2318,
    -5.6671,  -4.5662,  1.6799,  -7.9713, -6.7541, -13.0124, 1.8289,  -8.7098, -4.8553,  -6.4664,  1.7480,  -12.6888,
    -10.9363, -13.8180, 1.9832,  -7.1318, -2.3462, -9.7890,  1.9154,  -6.8982, -21.1557, -11.9171, 1.9905,  -7.9634,
    -2.0389,  -8.6603,  1.5025,  -3.5347, -8.3047, -4.7732,  0.6774,  -9.3136, -1.1910,  -11.6990, -0.4132, -2.1626,
    -5.9946,  -1.7728,  -0.4369, -8.8954};

constexpr std::array<float, L3_SIZE> l2_biases = {-8.6730, -1.9826, -0.6853, 1.1543,  1.3571,  0.5624,  0.3691,
                                                  0.8192,  0.1818,  -0.4483, -1.0107, -2.0010, -0.8043, -2.6092};

constexpr std::array<float, INPUT_SIZE> means = {
    5.452467080606962,   7.112796656718116,    0.8578524521488929,  0.2580247593890559, 0.3140062440636067,
    0.3301769348864686,  0.038723504354787004, 0.820671299053199,   0.1572143583836538, 5.921183065777163,
    21.84792463987609,   1166.1757456820978,   1167.0037809233131,  732.9955358915151,  -19.418957825610615,
    0.5227610872420946,  -1503.2052281145216,  -2.0642034078674727, 126.43629579725577, 0.043985748508458045,
    0.15268151661182816, 0.02280523060314052,  0.3006139186091227};

constexpr std::array<float, INPUT_SIZE> stddevs = {
    2.856556473540784,   6.308056910658986,   0.3492014067712561, 0.43754769217912187, 0.6693623705907236,
    0.47027664895829696, 0.1929352082054279,  0.3836273164981005, 0.36400275260177606, 0.9771860382278457,
    25.544261692591324,  6194.445366321299,   6196.782098044113,  7325.809065093816,   43.69528704433516,
    0.49948166423559315, 9047.625746073467,   214.0488170007344,  2000.5239829554266,  0.20506341076995852,
    0.35968023450968256, 0.14928212237330396, 0.4585250162723845};

class LMRNet
{
  public:
    LMRNet() = default;

    int predict(const std::array<int, INPUT_SIZE> &input)
    {
        std::array<float, INPUT_SIZE> scaled;
        for (int i = 0; i < INPUT_SIZE; ++i)
        {
            scaled[i] = 1.0f * (input[i] - means[i]) / stddevs[i];
        }

        for (int i = 0; i < L2_SIZE; ++i)
        {
            output[i] = 0.0f;
            for (int j = 0; j < INPUT_SIZE; ++j)
            {
                output[i] += scaled[j] * input_weights[i * INPUT_SIZE + j];
            }
            output[i] += input_biases[i];
            output[i] = std::max(0.0f, output[i]);
        }

        int best_class = 0;
        float best_value = -1e9;
        for (int c = 1; c < L3_SIZE; ++c)
        {
            float logit = l2_biases[c];
            for (int i = 0; i < L2_SIZE; ++i)
            {
                logit += output[i] * l2_weights[c * L2_SIZE + i];
            }

            if (logit > best_value)
            {
                best_value = logit;
                best_class = c;
            }
        }

        // Argmax to get predicted class
        return best_class;
    }

    std::array<float, L2_SIZE> output;
};